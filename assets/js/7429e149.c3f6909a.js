"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[522],{5931:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var t=n(4848),o=n(8453);const i={id:"jest-benchmark",title:"JestBenchmark"},s=void 0,l={id:"jest-benchmark",title:"JestBenchmark",description:"Benchmarks are useful tools for gating performance in CI, optimizing code, and capturing performance gains. JestBenchmark aims to make it easier to write benchmarks in the Luau language.",source:"@site/docs/JestBenchmarkAPI.md",sourceDirName:".",slug:"/jest-benchmark",permalink:"/jest-lua/jest-benchmark",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"jest-benchmark",title:"JestBenchmark"}},a={},c=[{value:"benchmark",id:"benchmark",level:3},{value:"Reporter",id:"reporter",level:3},{value:"initializeReporter",id:"initializereporter",level:3},{value:"Reporter.start()",id:"reporterstart",level:3},{value:"Reporter.stop()",id:"reporterstop",level:3},{value:"Reporter.report",id:"reporterreport",level:3},{value:"Reporter.finish",id:"reporterfinish",level:3},{value:"Profiler",id:"profiler",level:3},{value:"initializeProfiler",id:"initializeprofiler",level:3},{value:"Profiler.start",id:"profilerstart",level:3},{value:"Profiler.stop",id:"profilerstop",level:3},{value:"Profiler.finish",id:"profilerfinish",level:3},{value:"CustomReporters",id:"customreporters",level:3},{value:"MetricLogger",id:"metriclogger",level:3}];function d(e){const r={code:"code",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("img",{alt:"Roblox only",src:"img/roblox-only.svg"}),"\n",(0,t.jsx)(r.p,{children:"Benchmarks are useful tools for gating performance in CI, optimizing code, and capturing performance gains. JestBenchmark aims to make it easier to write benchmarks in the Luau language."}),"\n",(0,t.jsx)(r.p,{children:"JestBenchmark must be imported from the JestBenchmark Package"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'local JestBenchmark = require("@DevPackages/JestBenchmark")\nlocal benchmark = JestBenchmark.benchmark\nlocal CustomReporters = JestBenchmark.CustomReporters\n'})}),"\n",(0,t.jsx)(r.h3,{id:"benchmark",children:"benchmark"}),"\n",(0,t.jsx)("img",{alt:"Roblox only",src:"img/roblox-only.svg"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"benchmark"})," function is a wrapper around ",(0,t.jsx)(r.code,{children:"test"})," that provides automatic profiling for FPS and benchmark running time. Similar to ",(0,t.jsx)(r.code,{children:"test"}),", it exposes ",(0,t.jsx)(r.code,{children:"benchmark.only"})," and ",(0,t.jsx)(r.code,{children:"benchmark.skip"})," to focus and skip tests, respectively."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'describe("Home Page Benchmarks", function()\n  benchmark("First Render Performance", function(Profiler, reporters)\n    render(React.createElement(HomePage))\n\n    local GameCarousel = screen.getByText("Continue"):expect()\n\n    expect(GameCarousel).toBeDefined()\n  end)\nend)\n'})}),"\n",(0,t.jsx)(r.h3,{id:"reporter",children:"Reporter"}),"\n",(0,t.jsx)("img",{alt:"Roblox only",src:"img/roblox-only.svg"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"Reporter"})," object collects and aggregates data generated during a benchmark. For example, you may have an FPS reporter that collects the delta time between each frame in a benchmark and calculates the average FPS over the benchmark."]}),"\n",(0,t.jsx)(r.h3,{id:"initializereporter",children:"initializeReporter"}),"\n",(0,t.jsx)("img",{alt:"Roblox only",src:"img/roblox-only.svg"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"initializeReporter"})," accepts a metric name and collector function as arguments and returns a Reporter object. The metric name is the label given to the data collected. The collector function accepts a list of values and reduces them to a single value."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'local function average(nums: { number }): num\n  if #nums == 0 then\n    return 0\n  end\n\n  local sum = 0\n  for _, v in nums do\n    sum += v\n  end\n\n  return sum / #nums\nend\n\nlocal averageReporter = initializeReporter("average", average)\n'})}),"\n",(0,t.jsx)(r.h3,{id:"reporterstart",children:"Reporter.start()"}),"\n",(0,t.jsx)("img",{alt:"Roblox only",src:"img/roblox-only.svg"}),"\n",(0,t.jsxs)(r.p,{children:["A reporting segment is initialized with ",(0,t.jsx)(r.code,{children:"Reporter.start(sectionName: string)"}),". All values reported within the segment are collected as a group and reduced to a single value in ",(0,t.jsx)(r.code,{children:"Reporter.finish"}),". The segment is labeled with the ",(0,t.jsx)(r.code,{children:"sectionName"})," argument. Reporter segments can be nested or can run sequentially. All Reporter segments must be concluded by calling ",(0,t.jsx)(r.code,{children:"Reporter.stop"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'averageReporter.start("total")\n\naverageReporter.start("section1")\naverageReporter.report(1)\naverageReporter.report(3)\naverageReporter.stop() -- closes section1\n\naverageReporter.start("section2")\naverageReporter.report(5)\naverageReporter.report(7)\naverageReporter.stop() -- closes section2\n\naverageReporter.stop() -- closes total\n\nlocal sectionNames, sectionValues = averageReporter.finish()\n-- sectionNames: {"section1", "section2", "total"}\n-- sectionValues: {2, 6, 4}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"reporterstop",children:"Reporter.stop()"}),"\n",(0,t.jsx)("img",{alt:"Roblox only",src:"img/roblox-only.svg"}),"\n",(0,t.jsxs)(r.p,{children:["When ",(0,t.jsx)(r.code,{children:"Reporter.stop"})," is called, the reporter section at the top of the stack is popped off, and a section of reported values are marked for collection at the end of benchmark. No collection is done during the benchmark runtime, since this could reduce performance."]}),"\n",(0,t.jsx)(r.h3,{id:"reporterreport",children:"Reporter.report"}),"\n",(0,t.jsx)("img",{alt:"Roblox only",src:"img/roblox-only.svg"}),"\n",(0,t.jsxs)(r.p,{children:["When ",(0,t.jsx)(r.code,{children:"Reporter.report(value: T)"})," is called, a value is added to the report queue. The values passed to report are reduced when ",(0,t.jsx)(r.code,{children:"reporter.finish"})," is called."]}),"\n",(0,t.jsx)(r.h3,{id:"reporterfinish",children:"Reporter.finish"}),"\n",(0,t.jsx)("img",{alt:"Roblox only",src:"img/roblox-only.svg"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"Reporter.finish"})," should be called at the end of the benchmark runtime. It returns a list of section names and a list of section values generated according to the collectorFn. Values are returned in order of completion."]}),"\n",(0,t.jsx)(r.h3,{id:"profiler",children:"Profiler"}),"\n",(0,t.jsx)("img",{alt:"Roblox only",src:"img/roblox-only.svg"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"Profiler"})," object controls a set of reporters and reports data generated during a benchmark. The Profiler is initialized with the ",(0,t.jsx)(r.code,{children:"initializeProfiler"})," function. A profiling segment is started by calling ",(0,t.jsx)(r.code,{children:"Profiler.start"})," and stopped by calling ",(0,t.jsx)(r.code,{children:"Profiler.stop"}),". These segments can be called sequentially or can be nested. Results are generated by calling ",(0,t.jsx)(r.code,{children:"Profiler.finish"}),"."]}),"\n",(0,t.jsx)(r.h3,{id:"initializeprofiler",children:"initializeProfiler"}),"\n",(0,t.jsx)("img",{alt:"Roblox only",src:"img/roblox-only.svg"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"intializeProfiler"})," accepts a list of reporters and an outputFn as arguments and returns a Profiler object."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'local reporters = {\n  initializeReporter("average", average),\n  initializeReporter("sectionTime", sectionTime),\n}\n\nlocal outputFn = function(metricName: string, value: any)\n  print(`{metricName}, {value}`)\nend\n\nlocal profiler = initializeProfiler(reporters, outputFn)\n'})}),"\n",(0,t.jsx)(r.h3,{id:"profilerstart",children:"Profiler.start"}),"\n",(0,t.jsx)("img",{alt:"Roblox only",src:"img/roblox-only.svg"}),"\n",(0,t.jsxs)(r.p,{children:["When ",(0,t.jsx)(r.code,{children:"Profiler.start(sectionName: string)"})," is called, reporter.start is called for each reporter in the reporters list. Each Profiler section must be concluded with a ",(0,t.jsx)(r.code,{children:"Profiler.stop()"})," call."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'Profiler.start("section1")\n\nProfiler.stop()\n'})}),"\n",(0,t.jsx)(r.h3,{id:"profilerstop",children:"Profiler.stop"}),"\n",(0,t.jsx)("img",{alt:"Roblox only",src:"img/roblox-only.svg"}),"\n",(0,t.jsxs)(r.p,{children:["When ",(0,t.jsx)(r.code,{children:"Profiler.stop()"})," is called, reporter.stop is called for each reporter in the reporters list. Calling ",(0,t.jsx)(r.code,{children:"Profiler.stop"})," without first calling ",(0,t.jsx)(r.code,{children:"Profiler.start"})," will result in an error."]}),"\n",(0,t.jsx)(r.h3,{id:"profilerfinish",children:"Profiler.finish"}),"\n",(0,t.jsx)("img",{alt:"Roblox only",src:"img/roblox-only.svg"}),"\n",(0,t.jsxs)(r.p,{children:["When ",(0,t.jsx)(r.code,{children:"Profiler.finish"})," is called, reporter.finish is called for each reporter in the reporters list. The results of each finish call is then printed by the outputFn passed to the Profiler."]}),"\n",(0,t.jsx)(r.h3,{id:"customreporters",children:"CustomReporters"}),"\n",(0,t.jsx)("img",{alt:"Roblox only",src:"img/roblox-only.svg"}),"\n",(0,t.jsxs)(r.p,{children:["By default, the ",(0,t.jsx)(r.code,{children:"benchmark"})," function has two reporters attached: FPS and SectionTime. However, you may want to add custom reporters, perhaps to track Rodux action dispatches, time to interactive, or React re-renders. To enable this, the CustomReporters object exports ",(0,t.jsx)(r.code,{children:"useCustomReporters"}),", which allows the user to add additional reporters to the Profiler. These reporters are passed in a key-value table as the second argument in the provided benchmark function. This should be used in combination with ",(0,t.jsx)(r.code,{children:"useDefaultReporters"}),", which removes all custom reporters from the Profiler."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'beforeEach(function()\n  CustomReporters.useCustomReporters({\n    sum = initializeReporter("sum", function(nums)\n      local sum = 0\n      for _, v in nums do\n        sum += v\n      end\n      return sum\n    end)\n  })\nend)\n\nbenchmark("Total renders", function(Profiler, reporters)\n  local renderCount = getRenderCount()\n  reporters.sum.report(renderCount)\nend)\n\nafterEach(function()\n  CustomReporters.useDefaultReporters()\nend)\n'})}),"\n",(0,t.jsx)(r.h3,{id:"metriclogger",children:"MetricLogger"}),"\n",(0,t.jsx)("img",{alt:"Roblox only",src:"img/roblox-only.svg"}),"\n",(0,t.jsxs)(r.p,{children:["By default, benchmarks output directly to stdout. This may not be desirable in all cases. For example, you may want to output results to a BindableEvent or a file stream. The MetricLogger object exposes a ",(0,t.jsx)(r.code,{children:"useCustomMetricLogger"})," function, which allows the user to override the default output function. This should be used in combination with ",(0,t.jsx)(r.code,{children:"useDefaultMetricLogger"}),", which resets the output function to the default value"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"beforeEach(function()\n  MetricLogger.useCustomMetricLogger(function(metricName: string, value: any)\n    print(HttpService:JSONEncode({\n      metric = metricName,\n      value = value\n    }))\n  end)\nend)\n\nafterEach(function()\n  MetricLogger.useDefaultMetricLogger()\nend)\n"})})]})}function h(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>l});var t=n(6540);const o={},i=t.createContext(o);function s(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);